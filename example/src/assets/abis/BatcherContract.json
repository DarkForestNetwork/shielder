{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ConfigContract",
          "name": "_configContract",
          "type": "address"
        },
        {
          "internalType": "contract FeeBankContract",
          "name": "_feeBankContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "batchIndex",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "enum TransactionType",
          "name": "transactionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "transaction",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "batchHash",
          "type": "bytes32"
        }
      ],
      "name": "TransactionAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_batchIndex",
          "type": "uint64"
        },
        {
          "internalType": "enum TransactionType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_transaction",
          "type": "bytes"
        }
      ],
      "name": "addTransaction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "enum TransactionType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "batchHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "batchSizes",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configContract",
      "outputs": [
        {
          "internalType": "contract ConfigContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBankContract",
      "outputs": [
        {
          "internalType": "contract FeeBankContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_minFee",
          "type": "uint64"
        }
      ],
      "name": "setMinFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/jannik/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.3.0/contracts/GSN/Context.sol",
    "1": "/home/jannik/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.3.0/contracts/access/Ownable.sol",
    "11": "contracts/BatcherContract.sol",
    "12": "contracts/ConfigContract.sol",
    "15": "contracts/FeeBankContract.sol"
  },
  "ast": {
    "absolutePath": "contracts/BatcherContract.sol",
    "exportedSymbols": {
      "BatchConfig": [281],
      "BatcherContract": [250],
      "ConfigContract": [903],
      "FeeBankContract": [1958],
      "Ownable": [2832],
      "TransactionType": [12]
    },
    "id": 251,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": ["solidity", ">=", "0.7", ".0", "<", "0.8", ".0"],
        "nodeType": "PragmaDirective",
        "src": "33:31:11"
      },
      {
        "id": 2,
        "literals": ["experimental", "ABIEncoderV2"],
        "nodeType": "PragmaDirective",
        "src": "65:33:11"
      },
      {
        "absolutePath": "/home/jannik/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.3.0/contracts/access/Ownable.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@3.3.0/contracts/access/Ownable.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 251,
        "sourceUnit": 2833,
        "src": "100:101:11",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3,
              "name": "Ownable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "113:7:11",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/ConfigContract.sol",
        "file": "./ConfigContract.sol",
        "id": 7,
        "nodeType": "ImportDirective",
        "scope": 251,
        "sourceUnit": 904,
        "src": "202:65:11",
        "symbolAliases": [
          {
            "foreign": {
              "id": 5,
              "name": "ConfigContract",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "210:14:11",
              "typeDescriptions": {}
            }
          },
          {
            "foreign": {
              "id": 6,
              "name": "BatchConfig",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "226:11:11",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/FeeBankContract.sol",
        "file": "./FeeBankContract.sol",
        "id": 9,
        "nodeType": "ImportDirective",
        "scope": 251,
        "sourceUnit": 1959,
        "src": "268:54:11",
        "symbolAliases": [
          {
            "foreign": {
              "id": 8,
              "name": "FeeBankContract",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "276:15:11",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "canonicalName": "TransactionType",
        "id": 12,
        "members": [
          {
            "id": 10,
            "name": "Cipher",
            "nodeType": "EnumValue",
            "src": "346:6:11"
          },
          {
            "id": 11,
            "name": "Plain",
            "nodeType": "EnumValue",
            "src": "354:5:11"
          }
        ],
        "name": "TransactionType",
        "nodeType": "EnumDefinition",
        "src": "324:36:11"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 14,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2832,
              "src": "439:7:11",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$2832",
                "typeString": "contract Ownable"
              }
            },
            "id": 15,
            "nodeType": "InheritanceSpecifier",
            "src": "439:7:11"
          }
        ],
        "contractDependencies": [2832, 4318],
        "contractKind": "contract",
        "documentation": {
          "id": 13,
          "nodeType": "StructuredDocumentation",
          "src": "362:49:11",
          "text": "@title A contract that batches transactions."
        },
        "fullyImplemented": true,
        "id": 250,
        "linearizedBaseContracts": [250, 2832, 4318],
        "name": "BatcherContract",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 16,
              "nodeType": "StructuredDocumentation",
              "src": "453:402:11",
              "text": "@notice The event emitted whenever a transaction is added to a batch.\n @param batchIndex The index of the batch to which the transaction has been added.\n @param transactionType The type of the transaction (cipher or plain).\n @param transaction The encrypted or plaintext transaction (depending on the type).\n @param batchHash The batch hash after adding the transaction."
            },
            "id": 26,
            "name": "TransactionAdded",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 25,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "batchIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 26,
                  "src": "892:17:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 17,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "892:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 20,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "transactionType",
                  "nodeType": "VariableDeclaration",
                  "scope": 26,
                  "src": "919:31:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_TransactionType_$12",
                    "typeString": "enum TransactionType"
                  },
                  "typeName": {
                    "id": 19,
                    "name": "TransactionType",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 12,
                    "src": "919:15:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_TransactionType_$12",
                      "typeString": "enum TransactionType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 22,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "transaction",
                  "nodeType": "VariableDeclaration",
                  "scope": 26,
                  "src": "960:17:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 21,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "960:5:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "batchHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 26,
                  "src": "987:17:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 23,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "987:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "882:128:11"
            },
            "src": "860:151:11"
          },
          {
            "constant": false,
            "functionSelector": "bf66a182",
            "id": 28,
            "mutability": "mutable",
            "name": "configContract",
            "nodeType": "VariableDeclaration",
            "scope": 250,
            "src": "1075:36:11",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_ConfigContract_$903",
              "typeString": "contract ConfigContract"
            },
            "typeName": {
              "id": 27,
              "name": "ConfigContract",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 903,
              "src": "1075:14:11",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ConfigContract_$903",
                "typeString": "contract ConfigContract"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "36e1290d",
            "id": 30,
            "mutability": "mutable",
            "name": "feeBankContract",
            "nodeType": "VariableDeclaration",
            "scope": 250,
            "src": "1161:38:11",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_FeeBankContract_$1958",
              "typeString": "contract FeeBankContract"
            },
            "typeName": {
              "id": 29,
              "name": "FeeBankContract",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1958,
              "src": "1161:15:11",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_FeeBankContract_$1958",
                "typeString": "contract FeeBankContract"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "bfd260ca",
            "id": 34,
            "mutability": "mutable",
            "name": "batchSizes",
            "nodeType": "VariableDeclaration",
            "scope": 250,
            "src": "1349:43:11",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint64_$_t_uint64_$",
              "typeString": "mapping(uint64 => uint64)"
            },
            "typeName": {
              "id": 33,
              "keyType": {
                "id": 31,
                "name": "uint64",
                "nodeType": "ElementaryTypeName",
                "src": "1357:6:11",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                }
              },
              "nodeType": "Mapping",
              "src": "1349:25:11",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint64_$_t_uint64_$",
                "typeString": "mapping(uint64 => uint64)"
              },
              "valueType": {
                "id": 32,
                "name": "uint64",
                "nodeType": "ElementaryTypeName",
                "src": "1367:6:11",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "c87afa8a",
            "id": 40,
            "mutability": "mutable",
            "name": "batchHashes",
            "nodeType": "VariableDeclaration",
            "scope": 250,
            "src": "1467:73:11",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_enum$_TransactionType_$12_$_t_bytes32_$_$",
              "typeString": "mapping(uint64 => mapping(enum TransactionType => bytes32))"
            },
            "typeName": {
              "id": 39,
              "keyType": {
                "id": 35,
                "name": "uint64",
                "nodeType": "ElementaryTypeName",
                "src": "1475:6:11",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                }
              },
              "nodeType": "Mapping",
              "src": "1467:54:11",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_enum$_TransactionType_$12_$_t_bytes32_$_$",
                "typeString": "mapping(uint64 => mapping(enum TransactionType => bytes32))"
              },
              "valueType": {
                "id": 38,
                "keyType": {
                  "id": 36,
                  "name": "TransactionType",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 12,
                  "src": "1493:15:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_TransactionType_$12",
                    "typeString": "enum TransactionType"
                  }
                },
                "nodeType": "Mapping",
                "src": "1485:35:11",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_enum$_TransactionType_$12_$_t_bytes32_$",
                  "typeString": "mapping(enum TransactionType => bytes32)"
                },
                "valueType": {
                  "id": 37,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1512:7:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "24ec7590",
            "id": 42,
            "mutability": "mutable",
            "name": "minFee",
            "nodeType": "VariableDeclaration",
            "scope": 250,
            "src": "1612:20:11",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint64",
              "typeString": "uint64"
            },
            "typeName": {
              "id": 41,
              "name": "uint64",
              "nodeType": "ElementaryTypeName",
              "src": "1612:6:11",
              "typeDescriptions": {
                "typeIdentifier": "t_uint64",
                "typeString": "uint64"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 57,
              "nodeType": "Block",
              "src": "1739:93:11",
              "statements": [
                {
                  "expression": {
                    "id": 51,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 49,
                      "name": "configContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28,
                      "src": "1749:14:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ConfigContract_$903",
                        "typeString": "contract ConfigContract"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 50,
                      "name": "_configContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44,
                      "src": "1766:15:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ConfigContract_$903",
                        "typeString": "contract ConfigContract"
                      }
                    },
                    "src": "1749:32:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ConfigContract_$903",
                      "typeString": "contract ConfigContract"
                    }
                  },
                  "id": 52,
                  "nodeType": "ExpressionStatement",
                  "src": "1749:32:11"
                },
                {
                  "expression": {
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 53,
                      "name": "feeBankContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30,
                      "src": "1791:15:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_FeeBankContract_$1958",
                        "typeString": "contract FeeBankContract"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 54,
                      "name": "_feeBankContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 46,
                      "src": "1809:16:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_FeeBankContract_$1958",
                        "typeString": "contract FeeBankContract"
                      }
                    },
                    "src": "1791:34:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_FeeBankContract_$1958",
                      "typeString": "contract FeeBankContract"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "1791:34:11"
                }
              ]
            },
            "id": 58,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44,
                  "mutability": "mutable",
                  "name": "_configContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 58,
                  "src": "1660:30:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ConfigContract_$903",
                    "typeString": "contract ConfigContract"
                  },
                  "typeName": {
                    "id": 43,
                    "name": "ConfigContract",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 903,
                    "src": "1660:14:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ConfigContract_$903",
                      "typeString": "contract ConfigContract"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 46,
                  "mutability": "mutable",
                  "name": "_feeBankContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 58,
                  "src": "1700:32:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_FeeBankContract_$1958",
                    "typeString": "contract FeeBankContract"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "FeeBankContract",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1958,
                    "src": "1700:15:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_FeeBankContract_$1958",
                      "typeString": "contract FeeBankContract"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1650:88:11"
            },
            "returnParameters": {
              "id": 48,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1739:0:11"
            },
            "scope": 250,
            "src": "1639:193:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 235,
              "nodeType": "Block",
              "src": "2376:2137:11",
              "statements": [
                {
                  "assignments": [69],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 69,
                      "mutability": "mutable",
                      "name": "config",
                      "nodeType": "VariableDeclaration",
                      "scope": 235,
                      "src": "2386:25:11",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                        "typeString": "struct BatchConfig"
                      },
                      "typeName": {
                        "id": 68,
                        "name": "BatchConfig",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 281,
                        "src": "2386:11:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BatchConfig_$281_storage_ptr",
                          "typeString": "struct BatchConfig"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 74,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 72,
                        "name": "_batchIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61,
                        "src": "2439:11:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "expression": {
                        "id": 70,
                        "name": "configContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28,
                        "src": "2414:14:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ConfigContract_$903",
                          "typeString": "contract ConfigContract"
                        }
                      },
                      "id": 71,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getConfig",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 406,
                      "src": "2414:24:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint64_$returns$_t_struct$_BatchConfig_$281_memory_ptr_$",
                        "typeString": "function (uint64) view external returns (struct BatchConfig memory)"
                      }
                    },
                    "id": 73,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2414:37:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                      "typeString": "struct BatchConfig memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2386:65:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "id": 79,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 76,
                            "name": "config",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 69,
                            "src": "2506:6:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                              "typeString": "struct BatchConfig memory"
                            }
                          },
                          "id": 77,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "batchSpan",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 266,
                          "src": "2506:16:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 78,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2525:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2506:20:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42617463686572436f6e74726163743a206261746368206e6f7420616374697665",
                        "id": 80,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2528:35:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_392aa0857f76b821b2c466740c35981c20da916d1ec073e71c0e7d0395a32cd1",
                          "typeString": "literal_string \"BatcherContract: batch not active\""
                        },
                        "value": "BatcherContract: batch not active"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_392aa0857f76b821b2c466740c35981c20da916d1ec073e71c0e7d0395a32cd1",
                          "typeString": "literal_string \"BatcherContract: batch not active\""
                        }
                      ],
                      "id": 75,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "2498:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 81,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2498:66:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 82,
                  "nodeType": "ExpressionStatement",
                  "src": "2498:66:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "id": 87,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 84,
                          "name": "_batchIndex",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 61,
                          "src": "2622:11:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "expression": {
                            "id": 85,
                            "name": "config",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 69,
                            "src": "2637:6:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                              "typeString": "struct BatchConfig memory"
                            }
                          },
                          "id": 86,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "startBatchIndex",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 257,
                          "src": "2637:22:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "src": "2622:37:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 83,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "2615:6:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 88,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2615:45:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 89,
                  "nodeType": "ExpressionStatement",
                  "src": "2615:45:11"
                },
                {
                  "assignments": [91],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 91,
                      "mutability": "mutable",
                      "name": "_relativeBatchIndex",
                      "nodeType": "VariableDeclaration",
                      "scope": 235,
                      "src": "2709:26:11",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 90,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "2709:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 96,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    },
                    "id": 95,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 92,
                      "name": "_batchIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61,
                      "src": "2738:11:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "expression": {
                        "id": 93,
                        "name": "config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69,
                        "src": "2752:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                          "typeString": "struct BatchConfig memory"
                        }
                      },
                      "id": 94,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "startBatchIndex",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 257,
                      "src": "2752:22:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "2738:36:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2709:65:11"
                },
                {
                  "assignments": [98],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 98,
                      "mutability": "mutable",
                      "name": "_batchStartBlock",
                      "nodeType": "VariableDeclaration",
                      "scope": 235,
                      "src": "2784:23:11",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 97,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "2784:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 106,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    },
                    "id": 105,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 99,
                        "name": "config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69,
                        "src": "2810:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                          "typeString": "struct BatchConfig memory"
                        }
                      },
                      "id": 100,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "startBlockNumber",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 259,
                      "src": "2810:23:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "id": 104,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 101,
                        "name": "_relativeBatchIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 91,
                        "src": "2848:19:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "expression": {
                          "id": 102,
                          "name": "config",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69,
                          "src": "2882:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                            "typeString": "struct BatchConfig memory"
                          }
                        },
                        "id": 103,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "batchSpan",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 266,
                        "src": "2882:16:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "src": "2848:50:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "2810:88:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2784:114:11"
                },
                {
                  "assignments": [108],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 108,
                      "mutability": "mutable",
                      "name": "_batchEndBlock",
                      "nodeType": "VariableDeclaration",
                      "scope": 235,
                      "src": "2908:21:11",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 107,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "2908:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 113,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    },
                    "id": 112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 109,
                      "name": "_batchStartBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 98,
                      "src": "2932:16:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "expression": {
                        "id": 110,
                        "name": "config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69,
                        "src": "2951:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                          "typeString": "struct BatchConfig memory"
                        }
                      },
                      "id": 111,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "batchSpan",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 266,
                      "src": "2951:16:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "2932:35:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2908:59:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 118,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 115,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "2998:5:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 116,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "number",
                          "nodeType": "MemberAccess",
                          "src": "2998:12:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 117,
                          "name": "_batchStartBlock",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 98,
                          "src": "3014:16:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "src": "2998:32:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42617463686572436f6e74726163743a206261746368206e6f74207374617274656420796574",
                        "id": 119,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3044:40:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ce8628029ee9d7fe9af6b42610e9a627e3d37ec964c719f04e11f974b4db33e5",
                          "typeString": "literal_string \"BatcherContract: batch not started yet\""
                        },
                        "value": "BatcherContract: batch not started yet"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ce8628029ee9d7fe9af6b42610e9a627e3d37ec964c719f04e11f974b4db33e5",
                          "typeString": "literal_string \"BatcherContract: batch not started yet\""
                        }
                      ],
                      "id": 114,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "2977:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2977:117:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 121,
                  "nodeType": "ExpressionStatement",
                  "src": "2977:117:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 126,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 123,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "3125:5:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 124,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "number",
                          "nodeType": "MemberAccess",
                          "src": "3125:12:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 125,
                          "name": "_batchEndBlock",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 108,
                          "src": "3140:14:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "src": "3125:29:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42617463686572436f6e74726163743a20626174636820616c726561647920656e646564",
                        "id": 127,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3168:38:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fc32944ab64a37da1dfbc7f67925d9b1cb25d26dcdd23d74a74dfa8adaa96803",
                          "typeString": "literal_string \"BatcherContract: batch already ended\""
                        },
                        "value": "BatcherContract: batch already ended"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fc32944ab64a37da1dfbc7f67925d9b1cb25d26dcdd23d74a74dfa8adaa96803",
                          "typeString": "literal_string \"BatcherContract: batch already ended\""
                        }
                      ],
                      "id": 122,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "3104:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 128,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3104:112:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 129,
                  "nodeType": "ExpressionStatement",
                  "src": "3104:112:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 134,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 131,
                            "name": "_transaction",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 65,
                            "src": "3290:12:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          "id": 132,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3290:19:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 133,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3312:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3290:23:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42617463686572436f6e74726163743a207472616e73616374696f6e20697320656d707479",
                        "id": 135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3327:39:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2fd7921c6e0efb44e7b76dcc14bae1a9b14d8187ae18d0c886d34418e94450a7",
                          "typeString": "literal_string \"BatcherContract: transaction is empty\""
                        },
                        "value": "BatcherContract: transaction is empty"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2fd7921c6e0efb44e7b76dcc14bae1a9b14d8187ae18d0c886d34418e94450a7",
                          "typeString": "literal_string \"BatcherContract: transaction is empty\""
                        }
                      ],
                      "id": 130,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "3269:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 136,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3269:107:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 137,
                  "nodeType": "ExpressionStatement",
                  "src": "3269:107:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 143,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 139,
                            "name": "_transaction",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 65,
                            "src": "3407:12:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          "id": 140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3407:19:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "id": 141,
                            "name": "config",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 69,
                            "src": "3430:6:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                              "typeString": "struct BatchConfig memory"
                            }
                          },
                          "id": 142,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transactionSizeLimit",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 270,
                          "src": "3430:27:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "src": "3407:50:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42617463686572436f6e74726163743a207472616e73616374696f6e20746f6f20626967",
                        "id": 144,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3471:38:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7de1fb8a04006625d349247e1765ff9f24356270abaeda9f9b891ea1f11063b4",
                          "typeString": "literal_string \"BatcherContract: transaction too big\""
                        },
                        "value": "BatcherContract: transaction too big"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7de1fb8a04006625d349247e1765ff9f24356270abaeda9f9b891ea1f11063b4",
                          "typeString": "literal_string \"BatcherContract: transaction too big\""
                        }
                      ],
                      "id": 138,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "3386:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 145,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3386:133:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 146,
                  "nodeType": "ExpressionStatement",
                  "src": "3386:133:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 156,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 153,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 148,
                              "name": "batchSizes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 34,
                              "src": "3550:10:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint64_$_t_uint64_$",
                                "typeString": "mapping(uint64 => uint64)"
                              }
                            },
                            "id": 150,
                            "indexExpression": {
                              "id": 149,
                              "name": "_batchIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61,
                              "src": "3561:11:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3550:23:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "expression": {
                              "id": 151,
                              "name": "_transaction",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 65,
                              "src": "3576:12:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            "id": 152,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "3576:19:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3550:45:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "id": 154,
                            "name": "config",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 69,
                            "src": "3615:6:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                              "typeString": "struct BatchConfig memory"
                            }
                          },
                          "id": 155,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "batchSizeLimit",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 268,
                          "src": "3615:21:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "src": "3550:86:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42617463686572436f6e74726163743a20626174636820616c72656164792066756c6c",
                        "id": 157,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3650:37:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b98bfd16e284795c0d4834c46f119e9a48c54b34ec909f3a471e830efbedb89f",
                          "typeString": "literal_string \"BatcherContract: batch already full\""
                        },
                        "value": "BatcherContract: batch already full"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b98bfd16e284795c0d4834c46f119e9a48c54b34ec909f3a471e830efbedb89f",
                          "typeString": "literal_string \"BatcherContract: batch already full\""
                        }
                      ],
                      "id": 147,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "3529:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 158,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3529:168:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 159,
                  "nodeType": "ExpressionStatement",
                  "src": "3529:168:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 164,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 161,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3822:3:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 162,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "3822:9:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 163,
                          "name": "minFee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "3835:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "src": "3822:19:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42617463686572436f6e74726163743a2066656520746f6f20736d616c6c",
                        "id": 165,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3843:32:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ab8e0d9b2dea5c286261577ba25e5b966fc527f995d10146c4454f2e80f6f610",
                          "typeString": "literal_string \"BatcherContract: fee too small\""
                        },
                        "value": "BatcherContract: fee too small"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ab8e0d9b2dea5c286261577ba25e5b966fc527f995d10146c4454f2e80f6f610",
                          "typeString": "literal_string \"BatcherContract: fee too small\""
                        }
                      ],
                      "id": 160,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [-18, -18],
                      "referencedDeclaration": -18,
                      "src": "3814:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 166,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3814:62:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 167,
                  "nodeType": "ExpressionStatement",
                  "src": "3814:62:11"
                },
                {
                  "assignments": [169],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 169,
                      "mutability": "mutable",
                      "name": "_batchHashPreimage",
                      "nodeType": "VariableDeclaration",
                      "scope": 235,
                      "src": "3914:31:11",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 168,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "3914:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 179,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 172,
                        "name": "_transaction",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 65,
                        "src": "3978:12:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 173,
                            "name": "batchHashes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40,
                            "src": "4004:11:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_enum$_TransactionType_$12_$_t_bytes32_$_$",
                              "typeString": "mapping(uint64 => mapping(enum TransactionType => bytes32))"
                            }
                          },
                          "id": 175,
                          "indexExpression": {
                            "id": 174,
                            "name": "_batchIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61,
                            "src": "4016:11:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4004:24:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_TransactionType_$12_$_t_bytes32_$",
                            "typeString": "mapping(enum TransactionType => bytes32)"
                          }
                        },
                        "id": 177,
                        "indexExpression": {
                          "id": 176,
                          "name": "_type",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 63,
                          "src": "4029:5:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_TransactionType_$12",
                            "typeString": "enum TransactionType"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4004:31:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 170,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "3948:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 171,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodePacked",
                      "nodeType": "MemberAccess",
                      "src": "3948:16:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function () pure returns (bytes memory)"
                      }
                    },
                    "id": 178,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3948:97:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3914:131:11"
                },
                {
                  "assignments": [181],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 181,
                      "mutability": "mutable",
                      "name": "_newBatchHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 235,
                      "src": "4055:21:11",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 180,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4055:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 185,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 183,
                        "name": "_batchHashPreimage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 169,
                        "src": "4089:18:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 182,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "4079:9:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 184,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4079:29:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4055:53:11"
                },
                {
                  "expression": {
                    "id": 192,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 186,
                          "name": "batchHashes",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "4118:11:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint64_$_t_mapping$_t_enum$_TransactionType_$12_$_t_bytes32_$_$",
                            "typeString": "mapping(uint64 => mapping(enum TransactionType => bytes32))"
                          }
                        },
                        "id": 189,
                        "indexExpression": {
                          "id": 187,
                          "name": "_batchIndex",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 61,
                          "src": "4130:11:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4118:24:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_TransactionType_$12_$_t_bytes32_$",
                          "typeString": "mapping(enum TransactionType => bytes32)"
                        }
                      },
                      "id": 190,
                      "indexExpression": {
                        "id": 188,
                        "name": "_type",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63,
                        "src": "4143:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_TransactionType_$12",
                          "typeString": "enum TransactionType"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4118:31:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 191,
                      "name": "_newBatchHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 181,
                      "src": "4152:13:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "4118:47:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 193,
                  "nodeType": "ExpressionStatement",
                  "src": "4118:47:11"
                },
                {
                  "expression": {
                    "id": 202,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 194,
                        "name": "batchSizes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34,
                        "src": "4175:10:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint64_$_t_uint64_$",
                          "typeString": "mapping(uint64 => uint64)"
                        }
                      },
                      "id": 196,
                      "indexExpression": {
                        "id": 195,
                        "name": "_batchIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61,
                        "src": "4186:11:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4175:23:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 199,
                            "name": "_transaction",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 65,
                            "src": "4209:12:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          "id": 200,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "4209:19:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 198,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4202:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint64_$",
                          "typeString": "type(uint64)"
                        },
                        "typeName": {
                          "id": 197,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "4202:6:11",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 201,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4202:27:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "4175:54:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "id": 203,
                  "nodeType": "ExpressionStatement",
                  "src": "4175:54:11"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 215,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 207,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 204,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4290:3:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 205,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "src": "4290:9:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 206,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4302:1:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "4290:13:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 214,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 208,
                          "name": "config",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69,
                          "src": "4307:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                            "typeString": "struct BatchConfig memory"
                          }
                        },
                        "id": 209,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "feeReceiver",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 274,
                        "src": "4307:18:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 212,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4337:1:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 211,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4329:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 210,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4329:7:11",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 213,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4329:10:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "src": "4307:32:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "4290:49:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 227,
                  "nodeType": "IfStatement",
                  "src": "4286:141:11",
                  "trueBody": {
                    "id": 226,
                    "nodeType": "Block",
                    "src": "4341:86:11",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 222,
                                "name": "config",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 69,
                                "src": "4397:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_BatchConfig_$281_memory_ptr",
                                  "typeString": "struct BatchConfig memory"
                                }
                              },
                              "id": 223,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "feeReceiver",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 274,
                              "src": "4397:18:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 216,
                                "name": "feeBankContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 30,
                                "src": "4355:15:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_FeeBankContract_$1958",
                                  "typeString": "contract FeeBankContract"
                                }
                              },
                              "id": 218,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "deposit",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1856,
                              "src": "4355:23:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                                "typeString": "function (address) payable external"
                              }
                            },
                            "id": 221,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": ["value"],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "expression": {
                                  "id": 219,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "4386:3:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 220,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "4386:9:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "4355:41:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                              "typeString": "function (address) payable external"
                            }
                          },
                          "id": 224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4355:61:11",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 225,
                        "nodeType": "ExpressionStatement",
                        "src": "4355:61:11"
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 229,
                        "name": "_batchIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61,
                        "src": "4458:11:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 230,
                        "name": "_type",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63,
                        "src": "4471:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_TransactionType_$12",
                          "typeString": "enum TransactionType"
                        }
                      },
                      {
                        "id": 231,
                        "name": "_transaction",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 65,
                        "src": "4478:12:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 232,
                        "name": "_newBatchHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 181,
                        "src": "4492:13:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_enum$_TransactionType_$12",
                          "typeString": "enum TransactionType"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 228,
                      "name": "TransactionAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "4441:16:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint64_$_t_enum$_TransactionType_$12_$_t_bytes_memory_ptr_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint64,enum TransactionType,bytes memory,bytes32)"
                      }
                    },
                    "id": 233,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4441:65:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 234,
                  "nodeType": "EmitStatement",
                  "src": "4436:70:11"
                }
              ]
            },
            "documentation": {
              "id": 59,
              "nodeType": "StructuredDocumentation",
              "src": "1838:390:11",
              "text": "@notice Add a transaction to a batch.\n @param _batchIndex The index of the batch to which the transaction should be added. Note\n     that this must match the batch corresponding to the current block number.\n @param _type The type of the transaction (either cipher or plain).\n @param _transaction The encrypted or plaintext transaction (depending on `_type`)."
            },
            "functionSelector": "246673dc",
            "id": 236,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addTransaction",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 66,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61,
                  "mutability": "mutable",
                  "name": "_batchIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 236,
                  "src": "2266:18:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 60,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "2266:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 63,
                  "mutability": "mutable",
                  "name": "_type",
                  "nodeType": "VariableDeclaration",
                  "scope": 236,
                  "src": "2294:21:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_TransactionType_$12",
                    "typeString": "enum TransactionType"
                  },
                  "typeName": {
                    "id": 62,
                    "name": "TransactionType",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 12,
                    "src": "2294:15:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_TransactionType_$12",
                      "typeString": "enum TransactionType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 65,
                  "mutability": "mutable",
                  "name": "_transaction",
                  "nodeType": "VariableDeclaration",
                  "scope": 236,
                  "src": "2325:27:11",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 64,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2325:5:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2256:102:11"
            },
            "returnParameters": {
              "id": 67,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2376:0:11"
            },
            "scope": 250,
            "src": "2233:2280:11",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 248,
              "nodeType": "Block",
              "src": "4711:33:11",
              "statements": [
                {
                  "expression": {
                    "id": 246,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 244,
                      "name": "minFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42,
                      "src": "4721:6:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 245,
                      "name": "_minFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 239,
                      "src": "4730:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "4721:16:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "id": 247,
                  "nodeType": "ExpressionStatement",
                  "src": "4721:16:11"
                }
              ]
            },
            "documentation": {
              "id": 237,
              "nodeType": "StructuredDocumentation",
              "src": "4519:133:11",
              "text": "@notice Set the minimum fee required to add a transaction to the batch.\n @param _minFee The new value for the minimum fee."
            },
            "functionSelector": "48fd5acc",
            "id": 249,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 242,
                "modifierName": {
                  "id": 241,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2781,
                  "src": "4701:9:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "4701:9:11"
              }
            ],
            "name": "setMinFee",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 240,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 239,
                  "mutability": "mutable",
                  "name": "_minFee",
                  "nodeType": "VariableDeclaration",
                  "scope": 249,
                  "src": "4676:14:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 238,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "4676:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4675:16:11"
            },
            "returnParameters": {
              "id": 243,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4711:0:11"
            },
            "scope": 250,
            "src": "4657:87:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 251,
        "src": "411:4335:11"
      }
    ],
    "src": "33:4714:11"
  },
  "bytecode": "608060405234801561001057600080fd5b50604051610f81380380610f8183398101604081905261002f916100b8565b60006100396100b4565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610109565b3390565b600080604083850312156100ca578182fd5b82516100d5816100f1565b60208401519092506100e6816100f1565b809150509250929050565b6001600160a01b038116811461010657600080fd5b50565b610e69806101186000396000f3fe6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b1461012d578063bf66a18214610142578063bfd260ca14610157578063c87afa8a14610177578063f2fde38b146101a457610091565b8063246673dc1461009657806324ec7590146100ab57806336e1290d146100d657806348fd5acc146100f8578063715018a614610118575b600080fd5b6100a96100a4366004610ac6565b6101c4565b005b3480156100b757600080fd5b506100c0610593565b6040516100cd9190610d50565b60405180910390f35b3480156100e257600080fd5b506100eb6105a2565b6040516100cd9190610b65565b34801561010457600080fd5b506100a9610113366004610a76565b6105b1565b34801561012457600080fd5b506100a961063e565b34801561013957600080fd5b506100eb6106f2565b34801561014e57600080fd5b506100eb610701565b34801561016357600080fd5b506100c0610172366004610a76565b610710565b34801561018357600080fd5b50610197610192366004610a92565b61072b565b6040516100cd9190610b79565b3480156101b057600080fd5b506100a96101bf36600461091c565b610748565b60015460405163700465b160e11b81526000916001600160a01b03169063e008cb62906101f5908890600401610d50565b60006040518083038186803b15801561020d57600080fd5b505afa158015610221573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610249919081019061093f565b9050600081608001516001600160401b0316116102815760405162461bcd60e51b815260040161027890610bc7565b60405180910390fd5b80600001516001600160401b0316856001600160401b031610156102a157fe5b80516080820151602083015191870391818302019081016001600160401b0382164310156102e15760405162461bcd60e51b815260040161027890610cc6565b806001600160401b031643106103095760405162461bcd60e51b815260040161027890610d0c565b846103265760405162461bcd60e51b815260040161027890610b82565b60c08401516001600160401b03168511156103535760405162461bcd60e51b815260040161027890610c08565b60a08401516001600160401b038981166000908152600360205260409020549181169116860111156103975760405162461bcd60e51b815260040161027890610c83565b6005546001600160401b03163410156103c25760405162461bcd60e51b815260040161027890610c4c565b6001600160401b038816600090815260046020526040812087908790838b60018111156103eb57fe5b60018111156103f657fe5b81526020019081526020016000205460405160200161041793929190610b50565b604051602081830303815290604052905060008180519060200120905080600460008c6001600160401b03166001600160401b0316815260200190815260200160002060008b600181111561046857fe5b600181111561047357fe5b815260208082019290925260409081016000908120939093556001600160401b038d811684526003909252909120805467ffffffffffffffff1981169083168a0190921691909117905534158015906104d957506101008601516001600160a01b031615155b156105485760025461010087015160405163f340fa0160e01b81526001600160a01b039092169163f340fa019134916105159190600401610b65565b6000604051808303818588803b15801561052e57600080fd5b505af1158015610542573d6000803e3d6000fd5b50505050505b7ffc285e0b48a09e92ec4acb05226c557c0af1c3976d350d24b4fd4fa104f82c988a8a8a8a8560405161057f959493929190610d64565b60405180910390a150505050505050505050565b6005546001600160401b031681565b6002546001600160a01b031681565b6105b9610852565b6000546001600160a01b0390811691161461061b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6005805467ffffffffffffffff19166001600160401b0392909216919091179055565b610646610852565b6000546001600160a01b039081169116146106a8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001546001600160a01b031681565b6003602052600090815260409020546001600160401b031681565b600460209081526000928352604080842090915290825290205481565b610750610852565b6000546001600160a01b039081169116146107b2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166107f75760405162461bcd60e51b8152600401808060200182810382526026815260200180610e0e6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b805161086181610de0565b919050565b600082601f830112610876578081fd5b815160206001600160401b0382111561088b57fe5b808202610899828201610dbd565b8381528281019086840183880185018910156108b3578687fd5b8693505b858410156108de5780516108ca81610de0565b8352600193909301929184019184016108b7565b50979650505050505050565b80516001600160e01b03198116811461086157600080fd5b80356002811061086157600080fd5b805161086181610df8565b60006020828403121561092d578081fd5b813561093881610de0565b9392505050565b600060208284031215610950578081fd5b81516001600160401b0380821115610966578283fd5b818401915061018080838703121561097c578384fd5b61098581610dbd565b905061099083610911565b815261099e60208401610911565b60208201526040830151828111156109b4578485fd5b6109c087828601610866565b6040830152506109d260608401610911565b60608201526109e360808401610911565b60808201526109f460a08401610911565b60a0820152610a0560c08401610911565b60c0820152610a1660e08401610911565b60e08201526101009150610a2b828401610856565b828201526101209150610a3f828401610856565b828201526101409150610a538284016108ea565b828201526101609150610a67828401610911565b91810191909152949350505050565b600060208284031215610a87578081fd5b813561093881610df8565b60008060408385031215610aa4578081fd5b8235610aaf81610df8565b9150610abd60208401610902565b90509250929050565b60008060008060608587031215610adb578182fd5b8435610ae681610df8565b9350610af460208601610902565b925060408501356001600160401b0380821115610b0f578384fd5b818701915087601f830112610b22578384fd5b813581811115610b30578485fd5b886020828501011115610b41578485fd5b95989497505060200194505050565b60008385833750909101908152602001919050565b6001600160a01b0391909116815260200190565b90815260200190565b60208082526025908201527f42617463686572436f6e74726163743a207472616e73616374696f6e20697320604082015264656d70747960d81b606082015260800190565b60208082526021908201527f42617463686572436f6e74726163743a206261746368206e6f742061637469766040820152606560f81b606082015260800190565b60208082526024908201527f42617463686572436f6e74726163743a207472616e73616374696f6e20746f6f6040820152632062696760e01b606082015260800190565b6020808252601e908201527f42617463686572436f6e74726163743a2066656520746f6f20736d616c6c0000604082015260600190565b60208082526023908201527f42617463686572436f6e74726163743a20626174636820616c726561647920666040820152621d5b1b60ea1b606082015260800190565b60208082526026908201527f42617463686572436f6e74726163743a206261746368206e6f742073746172746040820152651959081e595d60d21b606082015260800190565b60208082526024908201527f42617463686572436f6e74726163743a20626174636820616c726561647920656040820152631b99195960e21b606082015260800190565b6001600160401b0391909116815260200190565b60006001600160401b038716825260028610610d7c57fe5b85602083015260806040830152836080830152838560a08401378060a0858401015260a0601f19601f86011683010190508260608301529695505050505050565b6040518181016001600160401b0381118282101715610dd857fe5b604052919050565b6001600160a01b0381168114610df557600080fd5b50565b6001600160401b0381168114610df557600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a264697066735822122058db6a358f3b75b84579e3a572a53dce9f50456a54d4ee2fd4494b3651c638c964736f6c63430007060033",
  "bytecodeSha1": "c56738c3c5cfb5151500c348f0a2ef971cddbddc",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.7.6+commit.7338295f"
  },
  "contractName": "BatcherContract",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [
    "ConfigContract",
    "OpenZeppelin/openzeppelin-contracts@3.3.0/Context",
    "FeeBankContract",
    "OpenZeppelin/openzeppelin-contracts@3.3.0/Ownable"
  ],
  "deployedBytecode": "6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b1461012d578063bf66a18214610142578063bfd260ca14610157578063c87afa8a14610177578063f2fde38b146101a457610091565b8063246673dc1461009657806324ec7590146100ab57806336e1290d146100d657806348fd5acc146100f8578063715018a614610118575b600080fd5b6100a96100a4366004610ac6565b6101c4565b005b3480156100b757600080fd5b506100c0610593565b6040516100cd9190610d50565b60405180910390f35b3480156100e257600080fd5b506100eb6105a2565b6040516100cd9190610b65565b34801561010457600080fd5b506100a9610113366004610a76565b6105b1565b34801561012457600080fd5b506100a961063e565b34801561013957600080fd5b506100eb6106f2565b34801561014e57600080fd5b506100eb610701565b34801561016357600080fd5b506100c0610172366004610a76565b610710565b34801561018357600080fd5b50610197610192366004610a92565b61072b565b6040516100cd9190610b79565b3480156101b057600080fd5b506100a96101bf36600461091c565b610748565b60015460405163700465b160e11b81526000916001600160a01b03169063e008cb62906101f5908890600401610d50565b60006040518083038186803b15801561020d57600080fd5b505afa158015610221573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610249919081019061093f565b9050600081608001516001600160401b0316116102815760405162461bcd60e51b815260040161027890610bc7565b60405180910390fd5b80600001516001600160401b0316856001600160401b031610156102a157fe5b80516080820151602083015191870391818302019081016001600160401b0382164310156102e15760405162461bcd60e51b815260040161027890610cc6565b806001600160401b031643106103095760405162461bcd60e51b815260040161027890610d0c565b846103265760405162461bcd60e51b815260040161027890610b82565b60c08401516001600160401b03168511156103535760405162461bcd60e51b815260040161027890610c08565b60a08401516001600160401b038981166000908152600360205260409020549181169116860111156103975760405162461bcd60e51b815260040161027890610c83565b6005546001600160401b03163410156103c25760405162461bcd60e51b815260040161027890610c4c565b6001600160401b038816600090815260046020526040812087908790838b60018111156103eb57fe5b60018111156103f657fe5b81526020019081526020016000205460405160200161041793929190610b50565b604051602081830303815290604052905060008180519060200120905080600460008c6001600160401b03166001600160401b0316815260200190815260200160002060008b600181111561046857fe5b600181111561047357fe5b815260208082019290925260409081016000908120939093556001600160401b038d811684526003909252909120805467ffffffffffffffff1981169083168a0190921691909117905534158015906104d957506101008601516001600160a01b031615155b156105485760025461010087015160405163f340fa0160e01b81526001600160a01b039092169163f340fa019134916105159190600401610b65565b6000604051808303818588803b15801561052e57600080fd5b505af1158015610542573d6000803e3d6000fd5b50505050505b7ffc285e0b48a09e92ec4acb05226c557c0af1c3976d350d24b4fd4fa104f82c988a8a8a8a8560405161057f959493929190610d64565b60405180910390a150505050505050505050565b6005546001600160401b031681565b6002546001600160a01b031681565b6105b9610852565b6000546001600160a01b0390811691161461061b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6005805467ffffffffffffffff19166001600160401b0392909216919091179055565b610646610852565b6000546001600160a01b039081169116146106a8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001546001600160a01b031681565b6003602052600090815260409020546001600160401b031681565b600460209081526000928352604080842090915290825290205481565b610750610852565b6000546001600160a01b039081169116146107b2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166107f75760405162461bcd60e51b8152600401808060200182810382526026815260200180610e0e6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b805161086181610de0565b919050565b600082601f830112610876578081fd5b815160206001600160401b0382111561088b57fe5b808202610899828201610dbd565b8381528281019086840183880185018910156108b3578687fd5b8693505b858410156108de5780516108ca81610de0565b8352600193909301929184019184016108b7565b50979650505050505050565b80516001600160e01b03198116811461086157600080fd5b80356002811061086157600080fd5b805161086181610df8565b60006020828403121561092d578081fd5b813561093881610de0565b9392505050565b600060208284031215610950578081fd5b81516001600160401b0380821115610966578283fd5b818401915061018080838703121561097c578384fd5b61098581610dbd565b905061099083610911565b815261099e60208401610911565b60208201526040830151828111156109b4578485fd5b6109c087828601610866565b6040830152506109d260608401610911565b60608201526109e360808401610911565b60808201526109f460a08401610911565b60a0820152610a0560c08401610911565b60c0820152610a1660e08401610911565b60e08201526101009150610a2b828401610856565b828201526101209150610a3f828401610856565b828201526101409150610a538284016108ea565b828201526101609150610a67828401610911565b91810191909152949350505050565b600060208284031215610a87578081fd5b813561093881610df8565b60008060408385031215610aa4578081fd5b8235610aaf81610df8565b9150610abd60208401610902565b90509250929050565b60008060008060608587031215610adb578182fd5b8435610ae681610df8565b9350610af460208601610902565b925060408501356001600160401b0380821115610b0f578384fd5b818701915087601f830112610b22578384fd5b813581811115610b30578485fd5b886020828501011115610b41578485fd5b95989497505060200194505050565b60008385833750909101908152602001919050565b6001600160a01b0391909116815260200190565b90815260200190565b60208082526025908201527f42617463686572436f6e74726163743a207472616e73616374696f6e20697320604082015264656d70747960d81b606082015260800190565b60208082526021908201527f42617463686572436f6e74726163743a206261746368206e6f742061637469766040820152606560f81b606082015260800190565b60208082526024908201527f42617463686572436f6e74726163743a207472616e73616374696f6e20746f6f6040820152632062696760e01b606082015260800190565b6020808252601e908201527f42617463686572436f6e74726163743a2066656520746f6f20736d616c6c0000604082015260600190565b60208082526023908201527f42617463686572436f6e74726163743a20626174636820616c726561647920666040820152621d5b1b60ea1b606082015260800190565b60208082526026908201527f42617463686572436f6e74726163743a206261746368206e6f742073746172746040820152651959081e595d60d21b606082015260800190565b60208082526024908201527f42617463686572436f6e74726163743a20626174636820616c726561647920656040820152631b99195960e21b606082015260800190565b6001600160401b0391909116815260200190565b60006001600160401b038716825260028610610d7c57fe5b85602083015260806040830152836080830152838560a08401378060a0858401015260a0601f19601f86011683010190508260608301529695505050505050565b6040518181016001600160401b0381118282101715610dd857fe5b604052919050565b6001600160a01b0381168114610df557600080fd5b50565b6001600160401b0381168114610df557600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a264697066735822122058db6a358f3b75b84579e3a572a53dce9f50456a54d4ee2fd4494b3651c638c964736f6c63430007060033",
  "deployedSourceMap": "411:4335:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2233:2280;;;;;;:::i;:::-;;:::i;:::-;;1612:20;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1161:38;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4657:87::-;;;;;;;;;;-1:-1:-1;4657:87:11;;;;;:::i;:::-;;:::i;1706:145:1:-;;;;;;;;;;;;;:::i;1083:77::-;;;;;;;;;;;;;:::i;1075:36:11:-;;;;;;;;;;;;;:::i;1349:43::-;;;;;;;;;;-1:-1:-1;1349:43:11;;;;;:::i;:::-;;:::i;1467:73::-;;;;;;;;;;-1:-1:-1;1467:73:11;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2000:240:1:-;;;;;;;;;;-1:-1:-1;2000:240:1;;;;;:::i;:::-;;:::i;2233:2280:11:-;2414:14;;:37;;-1:-1:-1;;;2414:37:11;;2386:25;;-1:-1:-1;;;;;2414:14:11;;:24;;:37;;2439:11;;2414:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2414:37:11;;;;;;;;;;;;:::i;:::-;2386:65;;2525:1;2506:6;:16;;;-1:-1:-1;;;;;2506:20:11;;2498:66;;;;-1:-1:-1;;;2498:66:11;;;;;;;:::i;:::-;;;;;;;;;2637:6;:22;;;-1:-1:-1;;;;;2622:37:11;:11;-1:-1:-1;;;;;2622:37:11;;;2615:45;;;;2752:22;;2882:16;;;;2810:23;;;;2738:36;;;;2848:50;;;2810:88;;2932:35;;-1:-1:-1;;;;;2998:32:11;;:12;:32;;2977:117;;;;-1:-1:-1;;;2977:117:11;;;;;;;:::i;:::-;3140:14;-1:-1:-1;;;;;3125:29:11;:12;:29;3104:112;;;;-1:-1:-1;;;3104:112:11;;;;;;;:::i;:::-;3290:23;3269:107;;;;-1:-1:-1;;;3269:107:11;;;;;;;:::i;:::-;3430:27;;;;-1:-1:-1;;;;;3407:50:11;;;;3386:133;;;;-1:-1:-1;;;3386:133:11;;;;;;;:::i;:::-;3615:21;;;;-1:-1:-1;;;;;3550:23:11;;;;;;;:10;:23;;;;;;:86;;;:23;;:45;;:86;;3529:168;;;;-1:-1:-1;;;3529:168:11;;;;;;;:::i;:::-;3835:6;;-1:-1:-1;;;;;3835:6:11;3822:9;:19;;3814:62;;;;-1:-1:-1;;;3814:62:11;;;;;;;:::i;:::-;-1:-1:-1;;;;;4004:24:11;;3914:31;4004:24;;;:11;:24;;;;;3978:12;;;;3914:31;4029:5;4004:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;3948:97;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3914:131;;4055:21;4089:18;4079:29;;;;;;4055:53;;4152:13;4118:11;:24;4130:11;-1:-1:-1;;;;;4118:24:11;-1:-1:-1;;;;;4118:24:11;;;;;;;;;;;;:31;4143:5;4118:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4118:31:11;;;:47;;;;-1:-1:-1;;;;;4175:23:11;;;;;:10;:23;;;;;;:54;;-1:-1:-1;;4175:54:11;;;;;;;;;;;;;;;;4290:9;:13;;;;:49;;-1:-1:-1;4307:18:11;;;;-1:-1:-1;;;;;4307:32:11;;;4290:49;4286:141;;;4355:15;;;4397:18;;;4355:61;;-1:-1:-1;;;4355:61:11;;-1:-1:-1;;;;;4355:15:11;;;;:23;;4386:9;;4355:61;;4397:18;4355:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4286:141;4441:65;4458:11;4471:5;4478:12;;4492:13;4441:65;;;;;;;;;;:::i;:::-;;;;;;;;2233:2280;;;;;;;;;;:::o;1612:20::-;;;-1:-1:-1;;;;;1612:20:11;;:::o;1161:38::-;;;-1:-1:-1;;;;;1161:38:11;;:::o;4657:87::-;1297:12:1;:10;:12::i;:::-;1287:6;;-1:-1:-1;;;;;1287:6:1;;;:22;;;1279:67;;;;;-1:-1:-1;;;1279:67:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4721:6:11::1;:16:::0;;-1:-1:-1;;4721:16:11::1;-1:-1:-1::0;;;;;4721:16:11;;;::::1;::::0;;;::::1;::::0;;4657:87::o;1706:145:1:-;1297:12;:10;:12::i;:::-;1287:6;;-1:-1:-1;;;;;1287:6:1;;;:22;;;1279:67;;;;;-1:-1:-1;;;1279:67:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1812:1:::1;1796:6:::0;;1775:40:::1;::::0;-1:-1:-1;;;;;1796:6:1;;::::1;::::0;1775:40:::1;::::0;1812:1;;1775:40:::1;1842:1;1825:19:::0;;-1:-1:-1;;;;;;1825:19:1::1;::::0;;1706:145::o;1083:77::-;1121:7;1147:6;-1:-1:-1;;;;;1147:6:1;1083:77;:::o;1075:36:11:-;;;-1:-1:-1;;;;;1075:36:11;;:::o;1349:43::-;;;;;;;;;;;;-1:-1:-1;;;;;1349:43:11;;:::o;1467:73::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;2000:240:1:-;1297:12;:10;:12::i;:::-;1287:6;;-1:-1:-1;;;;;1287:6:1;;;:22;;;1279:67;;;;;-1:-1:-1;;;1279:67:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2088:22:1;::::1;2080:73;;;;-1:-1:-1::0;;;2080:73:1::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2189:6;::::0;;2168:38:::1;::::0;-1:-1:-1;;;;;2168:38:1;;::::1;::::0;2189:6;::::1;::::0;2168:38:::1;::::0;::::1;2216:6;:17:::0;;-1:-1:-1;;;;;;2216:17:1::1;-1:-1:-1::0;;;;;2216:17:1;;;::::1;::::0;;;::::1;::::0;;2000:240::o;598:104:0:-;685:10;598:104;:::o;14:142:22:-;95:13;;117:33;95:13;117:33;:::i;:::-;76:80;;;:::o;161:814::-;;285:3;278:4;270:6;266:17;262:27;252:2;;307:5;300;293:20;252:2;340:6;334:13;366:4;-1:-1:-1;;;;;385:2:22;382:26;379:2;;;411:9;379:2;449;445;441:11;472:27;495:2;491;487:11;472:27;:::i;:::-;533:15;;;564:12;;;;596:15;;;630;;;626:24;;623:33;-1:-1:-1;620:2:22;;;673:5;666;659:20;620:2;699:5;690:14;;713:233;727:2;724:1;721:9;713:233;;;791:3;785:10;808:33;835:5;808:33;:::i;:::-;854:18;;745:1;738:9;;;;;892:12;;;;924;;713:233;;;-1:-1:-1;964:5:22;242:733;-1:-1:-1;;;;;;;242:733:22:o;980:179::-;1060:13;;-1:-1:-1;;;;;;1102:32:22;;1092:43;;1082:2;;1149:1;1146;1139:12;1164:159;1248:20;;1297:1;1287:12;;1277:2;;1313:1;1310;1303:12;1328:140;1408:13;;1430:32;1408:13;1430:32;:::i;1473:259::-;;1585:2;1573:9;1564:7;1560:23;1556:32;1553:2;;;1606:6;1598;1591:22;1553:2;1650:9;1637:23;1669:33;1696:5;1669:33;:::i;:::-;1721:5;1543:189;-1:-1:-1;;;1543:189:22:o;1737:1630::-;;1888:2;1876:9;1867:7;1863:23;1859:32;1856:2;;;1909:6;1901;1894:22;1856:2;1947:9;1941:16;-1:-1:-1;;;;;2017:2:22;2009:6;2006:14;2003:2;;;2038:6;2030;2023:22;2003:2;2081:6;2070:9;2066:22;2056:32;;2107:6;2147:2;2142;2133:7;2129:16;2125:25;2122:2;;;2168:6;2160;2153:22;2122:2;2199:18;2214:2;2199:18;:::i;:::-;2186:31;;2240:34;2271:2;2240:34;:::i;:::-;2233:5;2226:49;2307:43;2346:2;2342;2338:11;2307:43;:::i;:::-;2302:2;2295:5;2291:14;2284:67;2390:2;2386;2382:11;2376:18;2419:2;2409:8;2406:16;2403:2;;;2440:6;2432;2425:22;2403:2;2481:73;2546:7;2535:8;2531:2;2527:17;2481:73;:::i;:::-;2476:2;2469:5;2465:14;2458:97;;2587:43;2626:2;2622;2618:11;2587:43;:::i;:::-;2582:2;2575:5;2571:14;2564:67;2664:44;2703:3;2699:2;2695:12;2664:44;:::i;:::-;2658:3;2651:5;2647:15;2640:69;2742:44;2781:3;2777:2;2773:12;2742:44;:::i;:::-;2736:3;2729:5;2725:15;2718:69;2820:44;2859:3;2855:2;2851:12;2820:44;:::i;:::-;2814:3;2807:5;2803:15;2796:69;2898:44;2937:3;2933:2;2929:12;2898:44;:::i;:::-;2892:3;2885:5;2881:15;2874:69;2962:3;2952:13;;2997:44;3037:2;3033;3029:11;2997:44;:::i;:::-;2992:2;2985:5;2981:14;2974:68;3061:3;3051:13;;3096:44;3136:2;3132;3128:11;3096:44;:::i;:::-;3091:2;3084:5;3080:14;3073:68;3160:3;3150:13;;3195:43;3234:2;3230;3226:11;3195:43;:::i;:::-;3190:2;3183:5;3179:14;3172:67;3258:3;3248:13;;3293:43;3332:2;3328;3324:11;3293:43;:::i;:::-;3277:14;;;3270:67;;;;3281:5;1846:1521;-1:-1:-1;;;;1846:1521:22:o;3372:257::-;;3483:2;3471:9;3462:7;3458:23;3454:32;3451:2;;;3504:6;3496;3489:22;3451:2;3548:9;3535:23;3567:32;3593:5;3567:32;:::i;3634:365::-;;;3780:2;3768:9;3759:7;3755:23;3751:32;3748:2;;;3801:6;3793;3786:22;3748:2;3845:9;3832:23;3864:32;3890:5;3864:32;:::i;:::-;3915:5;-1:-1:-1;3939:54:22;3989:2;3974:18;;3939:54;:::i;:::-;3929:64;;3738:261;;;;;:::o;4004:884::-;;;;;4186:2;4174:9;4165:7;4161:23;4157:32;4154:2;;;4207:6;4199;4192:22;4154:2;4251:9;4238:23;4270:32;4296:5;4270:32;:::i;:::-;4321:5;-1:-1:-1;4345:54:22;4395:2;4380:18;;4345:54;:::i;:::-;4335:64;;4450:2;4439:9;4435:18;4422:32;-1:-1:-1;;;;;4514:2:22;4506:6;4503:14;4500:2;;;4535:6;4527;4520:22;4500:2;4578:6;4567:9;4563:22;4553:32;;4623:7;4616:4;4612:2;4608:13;4604:27;4594:2;;4650:6;4642;4635:22;4594:2;4695;4682:16;4721:2;4713:6;4710:14;4707:2;;;4742:6;4734;4727:22;4707:2;4792:7;4787:2;4778:6;4774:2;4770:15;4766:24;4763:37;4760:2;;;4818:6;4810;4803:22;4760:2;4144:744;;;;-1:-1:-1;;4854:2:22;4846:11;;-1:-1:-1;;;4144:744:22:o;4893:337::-;;5104:6;5096;5091:3;5078:33;-1:-1:-1;5130:16:22;;;5179:18;;;5221:2;5213:11;;5068:162;-1:-1:-1;5068:162:22:o;5235:203::-;-1:-1:-1;;;;;5399:32:22;;;;5381:51;;5369:2;5354:18;;5336:102::o;5443:177::-;5589:25;;;5577:2;5562:18;;5544:76::o;6087:401::-;6289:2;6271:21;;;6328:2;6308:18;;;6301:30;6367:34;6362:2;6347:18;;6340:62;-1:-1:-1;;;6433:2:22;6418:18;;6411:35;6478:3;6463:19;;6261:227::o;6493:397::-;6695:2;6677:21;;;6734:2;6714:18;;;6707:30;6773:34;6768:2;6753:18;;6746:62;-1:-1:-1;;;6839:2:22;6824:18;;6817:31;6880:3;6865:19;;6667:223::o;6895:400::-;7097:2;7079:21;;;7136:2;7116:18;;;7109:30;7175:34;7170:2;7155:18;;7148:62;-1:-1:-1;;;7241:2:22;7226:18;;7219:34;7285:3;7270:19;;7069:226::o;7300:354::-;7502:2;7484:21;;;7541:2;7521:18;;;7514:30;7580:32;7575:2;7560:18;;7553:60;7645:2;7630:18;;7474:180::o;7659:399::-;7861:2;7843:21;;;7900:2;7880:18;;;7873:30;7939:34;7934:2;7919:18;;7912:62;-1:-1:-1;;;8005:2:22;7990:18;;7983:33;8048:3;8033:19;;7833:225::o;8063:402::-;8265:2;8247:21;;;8304:2;8284:18;;;8277:30;8343:34;8338:2;8323:18;;8316:62;-1:-1:-1;;;8409:2:22;8394:18;;8387:36;8455:3;8440:19;;8237:228::o;8470:400::-;8672:2;8654:21;;;8711:2;8691:18;;;8684:30;8750:34;8745:2;8730:18;;8723:62;-1:-1:-1;;;8816:2:22;8801:18;;8794:34;8860:3;8845:19;;8644:226::o;8875:200::-;-1:-1:-1;;;;;9037:31:22;;;;9019:50;;9007:2;8992:18;;8974:101::o;9080:695::-;;-1:-1:-1;;;;;9339:6:22;9335:31;9324:9;9317:50;9397:1;9389:6;9386:13;9376:2;;9403:9;9376:2;9450:6;9445:2;9434:9;9430:18;9423:34;9493:3;9488:2;9477:9;9473:18;9466:31;9534:6;9528:3;9517:9;9513:19;9506:35;9592:6;9584;9578:3;9567:9;9563:19;9550:49;9649:4;9643:3;9634:6;9623:9;9619:22;9615:32;9608:46;9722:3;9715:2;9711:7;9706:2;9698:6;9694:15;9690:29;9679:9;9675:45;9671:55;9663:63;;9762:6;9757:2;9746:9;9742:18;9735:34;9307:468;;;;;;;;:::o;9780:242::-;9850:2;9844:9;9880:17;;;-1:-1:-1;;;;;9912:34:22;;9948:22;;;9909:62;9906:2;;;9974:9;9906:2;10001;9994:22;9824:198;;-1:-1:-1;9824:198:22:o;10027:133::-;-1:-1:-1;;;;;10104:31:22;;10094:42;;10084:2;;10150:1;10147;10140:12;10084:2;10074:86;:::o;10165:131::-;-1:-1:-1;;;;;10245:5:22;10241:30;10234:5;10231:41;10221:2;;10286:1;10283;10276:12",
  "language": "Solidity",
  "natspec": {
    "events": {
      "TransactionAdded(uint64,uint8,bytes,bytes32)": {
        "params": {
          "batchHash": "The batch hash after adding the transaction.",
          "batchIndex": "The index of the batch to which the transaction has been added.",
          "transaction": "The encrypted or plaintext transaction (depending on the type).",
          "transactionType": "The type of the transaction (cipher or plain)."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addTransaction(uint64,uint8,bytes)": {
        "notice": "Add a transaction to a batch.",
        "params": {
          "_batchIndex": "The index of the batch to which the transaction should be added. Note     that this must match the batch corresponding to the current block number.",
          "_transaction": "The encrypted or plaintext transaction (depending on `_type`).",
          "_type": "The type of the transaction (either cipher or plain)."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMinFee(uint64)": {
        "notice": "Set the minimum fee required to add a transaction to the batch.",
        "params": {
          "_minFee": "The new value for the minimum fee."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A contract that batches transactions.",
    "version": 1
  },
  "offset": [411, 4746],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x91 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0xBF66A182 EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0xBFD260CA EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xC87AFA8A EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1A4 JUMPI PUSH2 0x91 JUMP JUMPDEST DUP1 PUSH4 0x246673DC EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x24EC7590 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x36E1290D EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0x48FD5ACC EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x118 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA9 PUSH2 0xA4 CALLDATASIZE PUSH1 0x4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x1C4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0 PUSH2 0x593 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCD SWAP2 SWAP1 PUSH2 0xD50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCD SWAP2 SWAP1 PUSH2 0xB65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA9 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0xA76 JUMP JUMPDEST PUSH2 0x5B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA9 PUSH2 0x63E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0x6F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0x701 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0 PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xA76 JUMP JUMPDEST PUSH2 0x710 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x183 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x197 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0xA92 JUMP JUMPDEST PUSH2 0x72B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCD SWAP2 SWAP1 PUSH2 0xB79 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA9 PUSH2 0x1BF CALLDATASIZE PUSH1 0x4 PUSH2 0x91C JUMP JUMPDEST PUSH2 0x748 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x700465B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xE008CB62 SWAP1 PUSH2 0x1F5 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xD50 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x221 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x249 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x93F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x281 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x278 SWAP1 PUSH2 0xBC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO PUSH2 0x2A1 JUMPI INVALID JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x20 DUP4 ADD MLOAD SWAP2 DUP8 SUB SWAP2 DUP2 DUP4 MUL ADD SWAP1 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND NUMBER LT ISZERO PUSH2 0x2E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x278 SWAP1 PUSH2 0xCC6 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND NUMBER LT PUSH2 0x309 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x278 SWAP1 PUSH2 0xD0C JUMP JUMPDEST DUP5 PUSH2 0x326 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x278 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP6 GT ISZERO PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x278 SWAP1 PUSH2 0xC08 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 DUP2 AND SWAP2 AND DUP7 ADD GT ISZERO PUSH2 0x397 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x278 SWAP1 PUSH2 0xC83 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND CALLVALUE LT ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x278 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP8 SWAP1 DUP8 SWAP1 DUP4 DUP12 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3EB JUMPI INVALID JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3F6 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x417 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP1 PUSH1 0x4 PUSH1 0x0 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x468 JUMPI INVALID JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x473 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP14 DUP2 AND DUP5 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP2 AND SWAP1 DUP4 AND DUP11 ADD SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE CALLVALUE ISZERO DUP1 ISZERO SWAP1 PUSH2 0x4D9 JUMPI POP PUSH2 0x100 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x548 JUMPI PUSH1 0x2 SLOAD PUSH2 0x100 DUP8 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xF340FA01 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xF340FA01 SWAP2 CALLVALUE SWAP2 PUSH2 0x515 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0xB65 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x542 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST PUSH32 0xFC285E0B48A09E92EC4ACB05226C557C0AF1C3976D350D24B4FD4FA104F82C98 DUP11 DUP11 DUP11 DUP11 DUP6 PUSH1 0x40 MLOAD PUSH2 0x57F SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x852 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x61B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x646 PUSH2 0x852 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x6A8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x750 PUSH2 0x852 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x7B2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE0E PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x861 DUP2 PUSH2 0xDE0 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x876 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x88B JUMPI INVALID JUMPDEST DUP1 DUP3 MUL PUSH2 0x899 DUP3 DUP3 ADD PUSH2 0xDBD JUMP JUMPDEST DUP4 DUP2 MSTORE DUP3 DUP2 ADD SWAP1 DUP7 DUP5 ADD DUP4 DUP9 ADD DUP6 ADD DUP10 LT ISZERO PUSH2 0x8B3 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP6 DUP5 LT ISZERO PUSH2 0x8DE JUMPI DUP1 MLOAD PUSH2 0x8CA DUP2 PUSH2 0xDE0 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 DUP5 ADD PUSH2 0x8B7 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x861 DUP2 PUSH2 0xDF8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x92D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x938 DUP2 PUSH2 0xDE0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x950 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x966 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP PUSH2 0x180 DUP1 DUP4 DUP8 SUB SLT ISZERO PUSH2 0x97C JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x985 DUP2 PUSH2 0xDBD JUMP JUMPDEST SWAP1 POP PUSH2 0x990 DUP4 PUSH2 0x911 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x99E PUSH1 0x20 DUP5 ADD PUSH2 0x911 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x9B4 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x9C0 DUP8 DUP3 DUP7 ADD PUSH2 0x866 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH2 0x9D2 PUSH1 0x60 DUP5 ADD PUSH2 0x911 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x9E3 PUSH1 0x80 DUP5 ADD PUSH2 0x911 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x9F4 PUSH1 0xA0 DUP5 ADD PUSH2 0x911 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xA05 PUSH1 0xC0 DUP5 ADD PUSH2 0x911 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0xA16 PUSH1 0xE0 DUP5 ADD PUSH2 0x911 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0xA2B DUP3 DUP5 ADD PUSH2 0x856 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0xA3F DUP3 DUP5 ADD PUSH2 0x856 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0xA53 DUP3 DUP5 ADD PUSH2 0x8EA JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0xA67 DUP3 DUP5 ADD PUSH2 0x911 JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA87 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x938 DUP2 PUSH2 0xDF8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAA4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xAAF DUP2 PUSH2 0xDF8 JUMP JUMPDEST SWAP2 POP PUSH2 0xABD PUSH1 0x20 DUP5 ADD PUSH2 0x902 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xADB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0xAE6 DUP2 PUSH2 0xDF8 JUMP JUMPDEST SWAP4 POP PUSH2 0xAF4 PUSH1 0x20 DUP7 ADD PUSH2 0x902 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xB0F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB22 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xB30 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xB41 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP6 DUP4 CALLDATACOPY POP SWAP1 SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x42617463686572436F6E74726163743A207472616E73616374696F6E20697320 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x656D707479 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x42617463686572436F6E74726163743A206261746368206E6F74206163746976 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x65 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x42617463686572436F6E74726163743A207472616E73616374696F6E20746F6F PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x20626967 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x42617463686572436F6E74726163743A2066656520746F6F20736D616C6C0000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x42617463686572436F6E74726163743A20626174636820616C72656164792066 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x1D5B1B PUSH1 0xEA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x42617463686572436F6E74726163743A206261746368206E6F74207374617274 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x1959081E595D PUSH1 0xD2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x42617463686572436F6E74726163743A20626174636820616C72656164792065 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1B991959 PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND DUP3 MSTORE PUSH1 0x2 DUP7 LT PUSH2 0xD7C JUMPI INVALID JUMPDEST DUP6 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x80 DUP4 ADD MSTORE DUP4 DUP6 PUSH1 0xA0 DUP5 ADD CALLDATACOPY DUP1 PUSH1 0xA0 DUP6 DUP5 ADD ADD MSTORE PUSH1 0xA0 PUSH1 0x1F NOT PUSH1 0x1F DUP7 ADD AND DUP4 ADD ADD SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xDD8 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373A264697066735822122058DB6A358F3B PUSH22 0xB84579E3A572A53DCE9F50456A54D4EE2FD4494B3651 0xC6 CODESIZE 0xC9 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
  "pcMap": {},
  "sha1": "8d475e4899cf3d4ee25b8732db608e799211df10",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport {\n    Ownable\n} from \"OpenZeppelin/openzeppelin-contracts@3.3.0/contracts/access/Ownable.sol\";\nimport {ConfigContract, BatchConfig} from \"./ConfigContract.sol\";\nimport {FeeBankContract} from \"./FeeBankContract.sol\";\n\nenum TransactionType {Cipher, Plain}\n\n/// @title A contract that batches transactions.\ncontract BatcherContract is Ownable {\n    /// @notice The event emitted whenever a transaction is added to a batch.\n    /// @param batchIndex The index of the batch to which the transaction has been added.\n    /// @param transactionType The type of the transaction (cipher or plain).\n    /// @param transaction The encrypted or plaintext transaction (depending on the type).\n    /// @param batchHash The batch hash after adding the transaction.\n    event TransactionAdded(\n        uint64 batchIndex,\n        TransactionType transactionType,\n        bytes transaction,\n        bytes32 batchHash\n    );\n\n    // The contract from which batch configs are fetched.\n    ConfigContract public configContract;\n    // The contract to which fees are sent.\n    FeeBankContract public feeBankContract;\n\n    // Stores the current size of the batches by batch index. Note that cipher and plain batches\n    // are not tracked separately but in sum.\n    mapping(uint64 => uint64) public batchSizes;\n    // The current batch hashes by index and type (cipher or plain).\n    mapping(uint64 => mapping(TransactionType => bytes32)) public batchHashes;\n\n    // The minimum fee required to add a transaction to a batch.\n    uint64 public minFee;\n\n    constructor(\n        ConfigContract _configContract,\n        FeeBankContract _feeBankContract\n    ) {\n        configContract = _configContract;\n        feeBankContract = _feeBankContract;\n    }\n\n    /// @notice Add a transaction to a batch.\n    /// @param _batchIndex The index of the batch to which the transaction should be added. Note\n    ///     that this must match the batch corresponding to the current block number.\n    /// @param _type The type of the transaction (either cipher or plain).\n    /// @param _transaction The encrypted or plaintext transaction (depending on `_type`).\n    function addTransaction(\n        uint64 _batchIndex,\n        TransactionType _type,\n        bytes calldata _transaction\n    ) external payable {\n        BatchConfig memory config = configContract.getConfig(_batchIndex);\n\n        // check batching is active\n        require(config.batchSpan > 0, \"BatcherContract: batch not active\");\n\n        // check given batch is current\n        assert(_batchIndex >= config.startBatchIndex); // ensured by configContract.getConfig\n        uint64 _relativeBatchIndex = _batchIndex - config.startBatchIndex;\n        uint64 _batchStartBlock = config.startBlockNumber +\n            _relativeBatchIndex *\n            config.batchSpan;\n        uint64 _batchEndBlock = _batchStartBlock + config.batchSpan;\n        require(\n            block.number >= _batchStartBlock,\n            \"BatcherContract: batch not started yet\"\n        );\n        require(\n            block.number < _batchEndBlock,\n            \"BatcherContract: batch already ended\"\n        );\n\n        // check tx and batch size limits\n        require(\n            _transaction.length > 0,\n            \"BatcherContract: transaction is empty\"\n        );\n        require(\n            _transaction.length <= config.transactionSizeLimit,\n            \"BatcherContract: transaction too big\"\n        );\n        require(\n            batchSizes[_batchIndex] + _transaction.length <=\n                config.batchSizeLimit,\n            \"BatcherContract: batch already full\"\n        ); // overflow can be ignored here because number of txs and their sizes are both small\n\n        // check fee\n        require(msg.value >= minFee, \"BatcherContract: fee too small\");\n\n        // add tx to batch\n        bytes memory _batchHashPreimage = abi.encodePacked(\n            _transaction,\n            batchHashes[_batchIndex][_type]\n        );\n        bytes32 _newBatchHash = keccak256(_batchHashPreimage);\n        batchHashes[_batchIndex][_type] = _newBatchHash;\n        batchSizes[_batchIndex] += uint64(_transaction.length);\n\n        // pay fee to fee bank and emit event\n        if (msg.value > 0 && config.feeReceiver != address(0)) {\n            feeBankContract.deposit{value: msg.value}(config.feeReceiver);\n        }\n        emit TransactionAdded(_batchIndex, _type, _transaction, _newBatchHash);\n    }\n\n    /// @notice Set the minimum fee required to add a transaction to the batch.\n    /// @param _minFee The new value for the minimum fee.\n    function setMinFee(uint64 _minFee) external onlyOwner {\n        minFee = _minFee;\n    }\n}\n",
  "sourceMap": "411:4335:11:-:0;;;1639:193;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;882:17:1;902:12;:10;:12::i;:::-;924:6;:18;;-1:-1:-1;;;;;;924:18:1;-1:-1:-1;;;;;924:18:1;;;;;;;957:43;;924:18;;-1:-1:-1;924:18:1;957:43;;924:6;;957:43;-1:-1:-1;1749:14:11;:32;;-1:-1:-1;;;;;1749:32:11;;;-1:-1:-1;;;;;;1749:32:11;;;;;;;1791:15;:34;;;;;;;;;;;411:4335;;598:104:0;685:10;598:104;:::o;14:479:22:-;;;200:2;188:9;179:7;175:23;171:32;168:2;;;221:6;213;206:22;168:2;258:9;252:16;277:50;321:5;277:50;:::i;:::-;396:2;381:18;;375:25;346:5;;-1:-1:-1;409:52:22;375:25;409:52;:::i;:::-;480:7;470:17;;;158:335;;;;;:::o;498:150::-;-1:-1:-1;;;;;592:31:22;;582:42;;572:2;;638:1;635;628:12;572:2;562:86;:::o;:::-;411:4335:11;;;;;;",
  "sourcePath": "contracts/BatcherContract.sol",
  "type": "contract"
}
